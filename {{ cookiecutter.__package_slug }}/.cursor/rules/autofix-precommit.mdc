---
alwaysApply: false
---

# Autocorrection Flow

Goal: Fix pre-commit errors automatically.

## Optimized Fix Cycle

**Cycle:** `Run Pre-commit → Identify Issues → Fix → Validate → Repeat`

### 1. Run pre-commit only test/Tox

```bash
poetry run pre-commit run run-tox --all-files
```

The result must be `success`, if not, the process will stop. Respond to the user
to fix the issues before continuing.

### 2. Run pre-commit with all hooks

```bash
poetry run pre-commit run --all-files
```

Analyze the results and apply fixes from simple → complex, critical → cosmetic.

**Prioritization:**

1. High Priority (fix first)
   - Syntax errors (blocking execution)
   - Security errors (Bandit, detect-secrets)
   - Type errors (mypy)
   - Test failures (indicate refactoring broke functionality)
2. Medium Priority (fix next)
   - Code formatting (Black, isort, pycln)
   - Code style (flake8, pydocstyle)
   - Documentation issues (interrogate)
3. Low Priority (fix last)
   - Quality improvements (pyupgrade)
   - File formatting (prettier, end-of-file-fixer)

### 3. Apply fixes from simple → complex, critical → cosmetic

Identify the high priority issues and fix them first. Fix the sources, and apply
the fixes to the test files.

#### Validation Criteria

- ✅ Verify the specific issue is fixed
- ✅ Tox tests pass (confirming no regressions)
- ✅ No new errors introduced
- ✅ Code keeps original functionality

### 4. Repeat the process until all issues are fixed

Repeat the process until all issues are fixed.

## Special Cases & Tox Integration

- **Test failures**: Indicate refactoring broke functionality - fix the code,
  not the tests.
- **mypy**: If there are many errors, consider gradual refactoring or adjust configuration
- **flake8**: Adjust rules in `.flake8` if overly strict
- **Dependencies**: Check versions in `pyproject.toml` and hook revisions
- **Tox environments**: If there are issues with specific environments, review `tox.ini`

## Tox Integration: Simplified Workflow

- Run `poetry run pre-commit run --all-files` to check code and run tests in one step.
- If tests fail, fix the code (not the tests).
- Unit tests must always pass to prevent regressions.
- Adjust `.flake8` or dependencies if needed.

- Unit tests must always pass to prevent regressions.
- Adjust `.flake8` or dependencies if needed.
