---
description: When you need guidance on standard development workflows, environment setup, dependency management, testing, or project build/deployment.
alwaysApply: false
---
# Repository Usage (Compact)

Keep only the essentials for day-to-day work. For setup, see `docs/installation.md`.

## Workflow

1. Implement in `src/{{ cookiecutter.__package_slug }}/` → add tests in `tests/`
2. Format/lint → run tests → commit (Conventional Commits)

## Make targets

- `make test`: run tests
- `make test-cov`: tests with coverage
- `make deps`, `make deps-core`, `make deps-test`: manage base deps
- `make docker-build`: build Docker image
- `make docker-up`, `make docker-down`, `make docker-logs`: Docker compose helpers
- `make setup`: setup Python development environment
- `make install`: install package in development mode
- `make dev`: quick development workflow
- `make clean`: cleanup

## Modules

- `src/{{ cookiecutter.__package_slug }}/`: source code
- `tests/`: tests

> Use empty `__init__.py` files by default for packages

## Dependencies

- Always use Poetry to change deps. Do not edit `pyproject.toml`.

```bash
poetry add <package>
poetry add --group dev <dev_package>
```

## Quality

- Hooks: ruff, black, markdownlint, mypy, bandit, detect-secrets, interrogate

```bash
poetry run pre-commit run -a
```

## Testing

Organice the tests in the following the src directory structure; the files must be named like the src files
but with `test_` prefix. For example, if you have a `src/{{ cookiecutter.__package_slug }}/domain/entities.py` file, you should have a
`tests/{{ cookiecutter.__package_slug }}/domain/entites_entities.py` file.


## Versioning

- `python-semantic-release`; commit using Conventional Commits

## Docker

```bash
make docker-build
```

```bash
make docker
```

```bash
make docker
```
